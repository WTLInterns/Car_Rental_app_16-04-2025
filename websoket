# ETS Location Tracking API Documentation

## Overview
This document describes the REST API endpoints used by the ETS (Employee Transportation System) for real-time location tracking between drivers and users. The system enables ride coordination, location sharing, and ride status management.

## Base URL
```
/api/location
```

## Authentication
The API appears to use simple ID-based authentication with `driverId`, `userId`, and `slotId` parameters for request validation.

---

## Driver APIs

### 1. Update Driver Location
**Endpoint:** `POST /api/location/driver/update`

**Description:** Updates the driver's current location and receives ride information in response.

**Request Headers:**
```
Content-Type: application/json
```

**Request Body:**
```json
{
  "userId": "",
  "driverId": "string",
  "slotId": "string", 
  "latitude": number,
  "longitude": number,
  "messageType": "DRIVER_LOCATION",
  "rideStatus": "string"
}
```

**Request Parameters:**
- `userId` (string): Empty for driver updates
- `driverId` (string, required): Unique identifier for the driver
- `slotId` (string, required): Slot/route identifier
- `latitude` (number, required): Driver's current latitude
- `longitude` (number, required): Driver's current longitude  
- `messageType` (string): Always "DRIVER_LOCATION"
- `rideStatus` (string): Current ride status (PENDING, ARRIVED, PICKED_UP, DROPPED)

**Success Response (200 OK):**
```json
{
  "status": "success",
  "distanceToPickup": number,
  "estimatedTimeToPickup": number,
  "totalRideDistance": number, 
  "estimatedRideTime": number,
  "driverLocation": {
    "driverId": "string",
    "latitude": number,
    "longitude": number,
    "rideStatus": "string"
  }
}
```

**Response Fields:**
- `distanceToPickup` (number): Distance to nearest pickup point in km
- `estimatedTimeToPickup` (number): ETA to pickup in minutes
- `totalRideDistance` (number): Total ride distance in km
- `estimatedRideTime` (number): Estimated ride duration in minutes
- `driverLocation` (object): Driver location details

**Error Response (400/500):**
```json
{
  "status": "error",
  "message": "Error description"
}
```

---

### 2. Get Users in Slot
**Endpoint:** `GET /api/location/users/{slotId}`

**Description:** Retrieves all users assigned to a specific slot/route.

**URL Parameters:**
- `slotId` (string, required): The slot identifier

**Success Response (200 OK):**
```json
[
  {
    "userId": "string",
    "latitude": number,
    "longitude": number,
    "pickupLocation": "string",
    "dropLocation": "string",
    "pickupLatitude": number,
    "pickupLongitude": number,
    "dropLatitude": number,
    "dropLongitude": number
  }
]
```

**Response Fields:**
- `userId` (string): User identifier
- `latitude/longitude` (number): User's current location
- `pickupLocation/dropLocation` (string): Address strings
- `pickupLatitude/pickupLongitude` (number): Pickup coordinates
- `dropLatitude/dropLongitude` (number): Drop coordinates

**Error Response (404):**
```json
{
  "status": "error", 
  "message": "No users found in slot"
}
```

---

### 3. Update Ride Status
**Endpoint:** `POST /api/location/updateStatus`

**Description:** Updates the ride status for a specific user.

**Request Headers:**
```
Content-Type: application/json
```

**Request Body:**
```json
{
  "userId": "string",
  "driverId": "string", 
  "slotId": "string",
  "status": "string"
}
```

**Request Parameters:**
- `userId` (string, required): Target user identifier
- `driverId` (string, required): Driver identifier
- `slotId` (string, required): Slot identifier
- `status` (string, required): New status (PENDING, ARRIVED, PICKED_UP, DROPPED)

**Success Response (200 OK):**
```json
{
  "status": "success",
  "message": "Ride status updated successfully"
}
```

**Error Response (400/500):**
```json
{
  "status": "error",
  "message": "Error description"
}
```

---

### 4. Verify OTP
**Endpoint:** `POST /api/location/verifyOTP`

**Description:** Verifies the OTP provided by the user for pickup confirmation.

**Request Headers:**
```
Content-Type: application/json
```

**Request Body:**
```json
{
  "userId": "string",
  "slotId": "string",
  "otp": "string"
}
```

**Request Parameters:**
- `userId` (string, required): User identifier
- `slotId` (string, required): Slot identifier  
- `otp` (string, required): OTP code to verify

**Success Response (200 OK):**
```json
{
  "status": "success",
  "message": "OTP verified successfully"
}
```

**Error Response (400/401):**
```json
{
  "status": "error",
  "message": "Invalid OTP" 
}
```

---

## User APIs

### 5. Update User Location  
**Endpoint:** `POST /api/location/user/update`

**Description:** Updates the user's current location and pickup/drop details.

**Request Headers:**
```
Content-Type: application/json
```

**Request Body:**
```json
{
  "userId": "string",
  "driverId": "",
  "slotId": "string",
  "latitude": number,
  "longitude": number,
  "pickupLocation": "string",
  "dropLocation": "string", 
  "pickupLatitude": number,
  "pickupLongitude": number,
  "dropLatitude": number,
  "dropLongitude": number,
  "messageType": "USER_LOCATION"
}
```

**Request Parameters:**
- `userId` (string, required): User identifier
- `driverId` (string): Empty for user updates
- `slotId` (string, required): Slot identifier
- `latitude/longitude` (number, required): User's current location
- `pickupLocation/dropLocation` (string, required): Address strings
- `pickupLatitude/pickupLongitude` (number, required): Pickup coordinates
- `dropLatitude/dropLongitude` (number, required): Drop coordinates
- `messageType` (string): Always "USER_LOCATION"

**Success Response (200 OK):**
```json
{
  "status": "success",
  "driverLocation": {
    "driverId": "string",
    "latitude": number,
    "longitude": number,
    "rideStatus": "string"
  },
  "distanceToPickup": number,
  "estimatedTimeToPickup": number,
  "totalRideDistance": number,
  "estimatedRideTime": number,
  "rideStatus": "string"
}
```

**Response Fields:**
- `driverLocation` (object): Current driver location and status
- `distanceToPickup` (number): Distance to pickup in km
- `estimatedTimeToPickup` (number): ETA to pickup in minutes
- `totalRideDistance` (number): Total ride distance in km  
- `estimatedRideTime` (number): Estimated ride duration in minutes
- `rideStatus` (string): Current ride status

**Error Response (400/500):**
```json
{
  "status": "error",
  "message": "Error description"
}
```

---

### 6. Get Driver Location
**Endpoint:** `GET /api/location/driver/{slotId}`

**Description:** Retrieves the current driver location for a specific slot.

**URL Parameters:**
- `slotId` (string, required): The slot identifier

**Success Response (200 OK):**
```json
{
  "driverId": "string",
  "latitude": number,
  "longitude": number,
  "rideStatus": "string",
  "lastUpdated": "timestamp"
}
```

**Response Fields:**
- `driverId` (string): Driver identifier
- `latitude/longitude` (number): Driver's current coordinates
- `rideStatus` (string): Current ride status
- `lastUpdated` (string): Timestamp of last location update

**Error Response (404):**
```json
{
  "status": "error",
  "message": "No driver assigned to slot"
}
```

---

### 7. Generate OTP
**Endpoint:** `POST /api/location/generateOTP`

**Description:** Generates a new OTP for ride verification.

**Request Headers:**
```
Content-Type: application/json
```

**Request Body:**
```json
{
  "userId": "string",
  "slotId": "string"
}
```

**Request Parameters:**
- `userId` (string, required): User identifier
- `slotId` (string, required): Slot identifier

**Success Response (200 OK):**
```json
{
  "status": "success", 
  "otp": "string",
  "expiresAt": "timestamp"
}
```

**Response Fields:**
- `otp` (string): 6-digit OTP code
- `expiresAt` (string): OTP expiration timestamp

**Error Response (400/500):**
```json
{
  "status": "error",
  "message": "Error description"
}
```

---

## Data Models

### Location Object
```json
{
  "latitude": number,
  "longitude": number,
  "timestamp": "ISO 8601 string"
}
```

### Ride Status Enum
- `PENDING`: Initial state, waiting for driver
- `ARRIVED`: Driver has arrived at pickup location
- `PICKED_UP`: User has been picked up
- `DROPPED`: User has been dropped off

### User Object
```json
{
  "userId": "string",
  "slotId": "string", 
  "currentLocation": "Location Object",
  "pickupLocation": "string",
  "dropLocation": "string",
  "pickupCoordinates": "Location Object",
  "dropCoordinates": "Location Object"
}
```

### Driver Object  
```json
{
  "driverId": "string",
  "slotId": "string",
  "currentLocation": "Location Object", 
  "rideStatus": "Ride Status Enum"
}
```

---

## Error Codes

| Code | Description |
|------|-------------|
| 400 | Bad Request - Invalid parameters |
| 401 | Unauthorized - Invalid OTP |
| 404 | Not Found - Resource doesn't exist |
| 500 | Internal Server Error |

---

## Rate Limiting
- Location updates: Maximum 1 request per 5 seconds per user/driver
- OTP generation: Maximum 3 requests per minute per user
- Status updates: Maximum 10 requests per minute per driver

---

## WebSocket Alternative
For real-time updates, consider implementing WebSocket endpoints:
- `ws://host/api/location/driver/{driverId}/live`
- `ws://host/api/location/user/{userId}/live`

---

## External Dependencies

### Google Maps APIs Used
1. **Geocoding API**: Converting addresses to coordinates
2. **Places API**: Location autocomplete functionality  
3. **Maps JavaScript API**: Map display and interaction

### Third-party Services
1. **OSRM Routing**: `https://router.project-osrm.org/route/v1/driving/`
   - Used for route calculation between pickup and drop points
   - Fallback to straight-line distance if service unavailable

---

## Implementation Notes

1. **Location Updates**: Both driver and user apps send location updates every 5 seconds
2. **Polling**: Apps check for updates every 3 seconds
3. **OTP Expiry**: OTPs should expire after 10 minutes for security
4. **Route Calculation**: Uses OSRM for accurate driving routes with polyline encoding
5. **Fallback Handling**: Graceful degradation when external services are unavailable

---

## Sample Integration

### Driver App Workflow
1. Driver connects with `driverId` and `slotId`
2. App starts sending location updates via `POST /api/location/driver/update`
3. App polls for users via `GET /api/location/users/{slotId}`
4. Driver selects user and updates status via `POST /api/location/updateStatus`
5. Driver verifies OTP via `POST /api/location/verifyOTP` for pickup

### User App Workflow  
1. User connects with `userId`, `slotId`, pickup and drop locations
2. App sends location updates via `POST /api/location/user/update`
3. App polls for driver location via `GET /api/location/driver/{slotId}`
4. When driver arrives, app generates OTP via `POST /api/location/generateOTP`
5. User shares OTP with driver for verification