class Booking {
  final int id;
  final String fromLocation;
  final String toLocation;
  final String tripType;
  final String startDate;
  final String? returnDate;
  final String time;
  final String distance;
  final String bookingId;
  final String name;
  final String email;
  final String phone;
  final String userPickup;
  final String userDrop;
  final String date;
  final String userTripType;
  final String bookid;
  final String car;
  final double? baseAmount;
  final double amount;
  final int status;
  final String driverBhata;
  final double nightCharges;
  final double gst;
  final double serviceCharge;
  final dynamic offer;
  final int offerPartial;
  final double? offerAmount;
  final String txnId;
  final dynamic payment;
  final String? dateEnd;
  final String? timeEnd;
  final String bookingType;
  final String? description;
  final String? carrier;
  final String? driverEnterOtpTimePreStarted;
  final String? odoometerStarted;
  final String? odoometerEnterTimeStarted;
  final String? driverEnterOtpTimePostTrip;
  final String? odometerEnding;
  final String? odoometerEnterTimeEnding;
  final String? vendorCab;
  final String? vendorDriver;
  final String? penalty;

  Booking({
    required this.id,
    required this.fromLocation,
    required this.toLocation,
    required this.tripType,
    required this.startDate,
    required this.returnDate,
    required this.time,
    required this.distance,
    required this.bookingId,
    required this.name,
    required this.email,
    required this.phone,
    required this.userPickup,
    required this.userDrop,
    required this.date,
    required this.userTripType,
    required this.bookid,
    required this.car,
    required this.baseAmount,
    required this.amount,
    required this.status,
    required this.driverBhata,
    required this.nightCharges,
    required this.gst,
    required this.serviceCharge,
    required this.offer,
    required this.offerPartial,
    required this.offerAmount,
    required this.txnId,
    required this.payment,
    required this.dateEnd,
    required this.timeEnd,
    required this.bookingType,
    required this.description,
    required this.carrier,
    required this.driverEnterOtpTimePreStarted,
    required this.odoometerStarted,
    required this.odoometerEnterTimeStarted,
    required this.driverEnterOtpTimePostTrip,
    required this.odometerEnding,
    required this.odoometerEnterTimeEnding,
    required this.vendorCab,
    required this.vendorDriver,
    required this.penalty,
  });

  factory Booking.fromJson(Map<String, dynamic> json) {
    return Booking(
      id: json['id'],
      fromLocation: json['fromLocation'],
      toLocation: json['toLocation'],
      tripType: json['tripType'],
      startDate: json['startDate'],
      returnDate: json['returnDate'],
      time: json['time'],
      distance: json['distance'],
      bookingId: json['bookingId'],
      name: json['name'],
      email: json['email'],
      phone: json['phone'],
      userPickup: json['userPickup'],
      userDrop: json['userDrop'],
      date: json['date'],
      userTripType: json['userTripType'],
      bookid: json['bookid'],
      car: json['car'],
      baseAmount: json['baseAmount'] != null ? (json['baseAmount'] as num).toDouble() : null,
      amount: (json['amount'] as num).toDouble(),
      status: json['status'],
      driverBhata: json['driverBhata'],
      nightCharges: (json['nightCharges'] as num).toDouble(),
      gst: (json['gst'] as num).toDouble(),
      serviceCharge: (json['serviceCharge'] as num).toDouble(),
      offer: json['offer'],
      offerPartial: json['offerPartial'],
      offerAmount: json['offerAmount'] != null ? (json['offerAmount'] as num).toDouble() : null,
      txnId: json['txnId'],
      payment: json['payment'],
      dateEnd: json['dateEnd'],
      timeEnd: json['timeEnd'],
      bookingType: json['bookingType'],
      description: json['description'],
      carrier: json['carrier'],
      driverEnterOtpTimePreStarted: json['driverEnterOtpTimePreStarted'],
      odoometerStarted: json['odoometerStarted'],
      odoometerEnterTimeStarted: json['odoometerEnterTimeStarted'],
      driverEnterOtpTimePostTrip: json['driverEnterOtpTimePostTrip'],
      odometerEnding: json['odometerEnding'],
      odoometerEnterTimeEnding: json['odoometerEnterTimeEnding'],
      vendorCab: json['vendorCab'],
      vendorDriver: json['vendorDriver'],
      penalty: json['penalty'],
    );
  }
}
